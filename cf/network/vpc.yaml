Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: dev
    AllowedValues: [prod, dev, stage]
    ConstraintDescription: Must specify prod, dev, or test.

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.40.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.50.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/20

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.16.0/20

Conditions:
  isProd: !Equals [!Ref EnvironmentName, prod]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Internet Gateway
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Public Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: isProd
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Public Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Private Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: isProd
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Private Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - EIP for Natgateway (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: isProd
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - EIP for Natgateway (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network


  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Natgateway Public Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: isProd
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Natgateway Public Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Public Route (AZ1-2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isProd
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Private Routes (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: isProd
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Private Routes (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: isProd
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isProd
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - No Ingress
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Component
          Value: Network

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: isProd
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      VpcEndpointType: "Gateway"

#   DynamodbEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       RouteTableIds:
#         - !Ref PrivateRouteTable1
#         - !Ref PrivateRouteTable2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
#       VpcId: !Ref VPC
#       VpcEndpointType: "Gateway"

#   ECREndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

#   SNSEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.sns
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

#   SQSEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

#   SagemakerApiEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.sagemaker.api
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

#   SagemakerRuntimeEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.sagemaker.runtime
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

#   KMSEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

#   SecretsManagerEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#       ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
#       VpcId: !Ref VPC
#       VpcEndpointType: "Interface"
#       PrivateDnsEnabled: true

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

#   PublicSubnets:
#     Description: A list of the public subnets
#     Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

#   PrivateSubnets:
#     Description: A list of the private subnets
#     Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

#   PublicSubnet1:
#     Description: A reference to the public subnet in the 1st Availability Zone
#     Value: !Ref PublicSubnet1

#   PublicSubnet2:
#     Description: A reference to the public subnet in the 2nd Availability Zone
#     Value: !Ref PublicSubnet2

#   PrivateSubnet1:
#     Description: A reference to the private subnet in the 1st Availability Zone
#     Value: !Ref PrivateSubnet1

#   PrivateSubnet2:
#     Description: A reference to the private subnet in the 2nd Availability Zone
#     Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

#   S3Endpoint:
#     Description: 'The VPC endpoint to S3.'
#     Value: !Ref S3Endpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-S3Endpoint'

#   DynamodbEndpoint:
#     Description: 'The VPC endpoint to Dynamodb.'
#     Value: !Ref DynamodbEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-DynamodbEndpoint'

#   ECREndpoint:
#     Description: 'The VPC endpoint to ECR.'
#     Value: !Ref ECREndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-ECREndpoint'

#   SNSEndpoint:
#     Description: 'The VPC endpoint to SNS.'
#     Value: !Ref SNSEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-SNSEndpoint'

#   SQSEndpoint:
#     Description: 'The VPC endpoint to SQS.'
#     Value: !Ref SQSEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-SQSEndpoint'

#   SagemakerApiEndpoint:
#     Description: 'The VPC endpoint to Sagemaker API.'
#     Value: !Ref SagemakerApiEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-SagemakerApiEndpoint'

#   SagemakerRuntimeEndpoint:
#     Description: 'The VPC endpoint to Sagemaker Runtime.'
#     Value: !Ref SagemakerRuntimeEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-SagemakerRuntimeEndpoint'

#   KMSEndpoint:
#     Description: 'The VPC endpoint to KMS.'
#     Value: !Ref KMSEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-KMSEndpoint'

#   SecretsManagerEndpoint:
#     Description: 'The VPC endpoint to Secrets Manager.'
#     Value: !Ref SecretsManagerEndpoint
#     Export:
#       Name: !Sub '${AWS::StackName}-SecretsManagerEndpoint'
